#!/usr/bin/perl

use strict;
use Getopt::Long;
use Net::Pcap;
use NetPacket::Ethernet qw(:types);
use NetPacket::IP       qw(:protos);
use NetPacket::IPv6;
use NetPacket::UDP;

# Configuration
my $net_interface = "eth0";
my $pcap_filter = "port 123 and udp";
my $src_ipv4 = "";
my $src_ipv6 = "";
my $subnet_report = 0;
my $help = 0;
GetOptions (
    "interface=s" => \$net_interface,
    "filter=s"    => \$pcap_filter,
    "ipv4=s"      => \$src_ipv4,
    "ipv6=s"      => \$src_ipv6,
    "subnets"     => \$subnet_report,
    "help"        => \$help
) or die("Error in command line arguments\n");
# end Configuration

if($help) {
  print "$0: report of NTP clients\n";
  print "  --interface=eth0                   -- which interface to listen on\n";
  print "  --pcap_filter=\"port 123 and udp\" -- pcap filter to use\n";
  print "  --ipv4=x.x.x.x                     -- ipv4 source address to filter out (local address)\n";
  print "  --ipv6=x::x                        -- ipv6 source address to filter out (local address)\n";
  print "  --subnets                          -- give a subnet report\n";
  print "  --help                             -- this message\n";
  exit(1);
}

my(%clients,$packets);

my($last,$client_ts);
sub report {
  my $now = time();
  if($now != $last) {
    $last = $now;
    my($clientcount) = scalar(keys %clients);
    printf("p:%d c:%d a:%0.1f\n",$packets, $clientcount, ($packets/$clientcount));
    if($now-$client_ts > 60) { # every 60 seconds, give a report
      my(@top) = sort { $clients{$b} <=> $clients{$a} } keys %clients;
      my $pos = 0;
      for(my $i = 0; $i < 10 and $i < @top and $clients{$top[$i]} > 5; $i++) {
	my $client = $top[$i];
	my $msg = "[$client]:$clients{$client} ";
	if($pos + length($msg) > 80) {
	  print "\n";
	  $pos = 0;
	}
	print $msg;
	$pos += length($msg);
      }
      if($pos > 0) {
	print "\n";
      }
      $client_ts = $now;

      %clients = (); # clear clients every minute
      $packets = 0;
    }
  }
}

sub process_packet {
  my ($user_data, $header, $packet) = @_;
  my($proto, $src_ip, $dest_ip, $src_port, $dest_port, $payload);

  # decode the Ethernet frame
  my $ethframe = NetPacket::Ethernet->decode($packet);

  if ($ethframe->{type} == ETH_TYPE_IP) {
    # decode the IP payload
    my $ipframe = NetPacket::IP->decode($ethframe->{data});
    $src_ip  = $ipframe->{src_ip};
    $dest_ip = $ipframe->{dest_ip};

    if ($ipframe->{proto} == IP_PROTO_UDP) {
      my $udpframe = NetPacket::UDP->decode($ipframe->{data});
      $proto     = "UDP";
      $src_port  = $udpframe->{src_port};
      $dest_port = $udpframe->{dest_port};
      $payload   = $udpframe->{data};
    } else {
      $proto = $ipframe->{proto};
    }

    if($subnet_report) {
      $src_ip =~ s/\.[0-9]+$/./; # summarize on /24's
    }
    $clients{$src_ip}++;
    $packets++;
  } elsif($ethframe->{type} == ETH_TYPE_IPv6) {
    # decode the IP payload
    my $ipframe = NetPacket::IPv6->decode($ethframe->{data});
    $src_ip  = $ipframe->{src_ip};
    $dest_ip = $ipframe->{dest_ip};

    if ($ipframe->{next_header} == IP_PROTO_UDP) {
      my $udpframe = NetPacket::UDP->decode($ipframe->{data});
      $proto     = "UDP";
      $src_port  = $udpframe->{src_port};
      $dest_port = $udpframe->{dest_port};
      $payload   = $udpframe->{data};
    } else {
      $proto = $ipframe->{next_header};
    }

    if($subnet_report) {
      $src_ip = $ipframe->subnet_64();
    }
    $clients{$src_ip}++;
    $packets++;
  }

  report();
}

if($src_ipv4) {
  $pcap_filter .= " and not src $src_ipv4";
}
if($src_ipv6) {
  $pcap_filter .= " and not src $src_ipv6";
}
my($err);
my $pcap = Net::Pcap::pcap_open_live($net_interface, 256, 0, 10, \$err)
        or die "fatal: can't open network device $net_interface: $err (do you have the privileges?)\n";
my($filter);
Net::Pcap::pcap_compile($pcap, \$filter, $pcap_filter, 1, 0) == 0 or die "fatal: filter error\n";
Net::Pcap::pcap_setfilter($pcap, $filter);

Net::Pcap::pcap_loop($pcap, -1, \&process_packet, '');
Net::Pcap::pcap_close($pcap);
